#include "linq.h"
#include <assert.h>
#include <iostream>
#include <math.h>
#include <sstream>

using linq::from;

void from_to_vector() {
    std::vector<int> xs = { 1, 2, 3 };
    std::vector<int> res = from(xs.begin(), xs.end()).to_vector();
    assert(res == xs);
}

void from_select() {
    const int xs[] = { 1, 2, 3 };
    std::vector<int> res = from(xs, xs + 3).select([](int x) { return x + 5; }).to_vector();
    std::vector<int> expected = { 6, 7, 8 };
    assert(res == expected);
}

void from_drop_select() {
    const int xs[] = { 1, 2, 3 };
    std::vector<int> res = from(xs, xs + 3).drop(1).select([](int x) { return x + 5; }).to_vector();
    std::vector<int> expected = { 7, 8 };
    assert(res == expected);
    std::vector <double> res1 = from(xs, xs + 3).drop(1).select<double>([](int x) { return sqrt(x); }).drop(1).to_vector();
    std::vector <double> expected1 = { sqrt(3.0) };
    assert(res1 == expected1);
}

void where() {
    const int xs[] = { 1, 2, 3, 4, 5 };
    std::vector<int> res = from(xs, xs + 5).where([](int x) { return x < 4; }).where([](int x) { return x > 1; }).to_vector();
    std::vector<int> expected = { 2, 3 };
    assert(res == expected);
    std::vector<int> res1 = from(xs + 1, xs + 5).where_neq(4).where_neq(3).where_neq(1).to_vector();
    std::vector<int> expected1 = { 2, 5 };
    assert(res1 == expected1);
}

void until() {
    const int xs[] = { 1, 2, 3, 4, 5 };
    std::vector<int> res = from(xs, xs + 5)
                            .until([](int x) { return x == 4; })
                            .drop(1)
                            .until([](int x) { return x == 1; })
                            .to_vector();
    std::vector<int> expected = { 2, 3 };
    assert(res == expected);

    std::vector<int> res1 = from(xs, xs + 5)
            .until_eq(4)
            .drop(1)
            .until_eq(3)
            .to_vector();
    std::vector<int> expected1 = { 2 };
    assert(res1 == expected1);
}

void example1() {
    int xs[] = { 1, 2, 3, 4, 5 };

    std::vector<int> res =
            from(xs, xs + 5)  // Взять элементы xs
                    .select([](int x) { return x * x; })  // Возвести в квадрат
                    .where_neq(25)    // Оставить только значения != 25
                    .where([](int x) { return x > 3; })   // Оставить только значения > 3
                    .drop(2)          // Убрать два элемента из начала
                    .to_vector();     // Преобразовать результат в вектор

    std::vector<int> expected = { 16 };
    assert(res == expected);
}

void example2() {
    std::stringstream ss("1 2 3 -1 4");
    std::istream_iterator<int> in(ss), eof;

    std::vector<int> res =
            from(in, eof)  // Взять числа из входного потока
                    .take(4)       // Не более четырёх чисел
                    .until_eq(-1)  // Перестать читать после прочтения -1
                    .to_vector();  // Получить список считанных чисел

    std::vector<int> expected = { 1, 2, 3 };
    assert(expected == res);

    int remaining;
    assert(ss >> remaining);
    assert(remaining == 4);
}

void example3() {
    int xs[] = { 1, 2, 3, 4, 5 };

    std::vector<double> res =
            from(xs, xs + 5)  // Взять элементы xs
                    .select<double>([](int x) { return sqrt(x); })  // Извлечь корень
                    .to_vector();     // Преобразовать результат в вектор

    assert(res.size() == 5);
    for (std::size_t i = 0; i < res.size(); i++) {
        assert(fabs(res[i] - sqrt(xs[i])) < 1e-9);
    }
}

void example4() {
    std::stringstream iss("4 16");
    std::stringstream oss;
    std::istream_iterator<int> in(iss), eof;
    std::ostream_iterator<double> out(oss, "\n");

    from(in, eof)    // Взять числа из входного потока
            .select([](int x) { return static_cast<int>(sqrt(x) + 1e-6); })  // Извлечь из каждого корень
            .copy_to(out);  // Вывести на экран

    assert(oss.str() == "2\n4\n");
}


int main() {
    from_to_vector();
    from_select();
    from_drop_select();
    where();
    until();
    example1();
    example2();
    example3();
    example4();
    return 0;
}